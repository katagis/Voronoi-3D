list<Tetra> delunay;

delunay.add(superTetra);

for point : points:
	bad := empty
	
	for tetra : delunay: 
		if point in_sphere(tetra):
			bad.add(tetra)
			
	
	for badTetra : bad:
		delunay.remove(badTetra)

	polyhedron := empty
	
	for badTetra : bad:
		for face : badTetra:
			
			if face not_shared(bad):
				polyhedron.add(face)
	
	
	for face in polyhedron:
		newTetra: {face, point}
		UpdateAdj(newTetra);
		delunay.add(newTetra)
		
for tetra : delunay:
	if tetra shares_vtx(superTetra):
		delunay.remove(tetra)
		

########################
#### VORO 3D ###########
########################

for point in del:
	make voro convex
	for edge connected to point:
		convex.add(make voro face)


voro_face(edge):
	poly := empty
	for tetra containing edge:
		poly.add(tetra.circum)



















voronoi_face(adjTetras, edge, pointWeBuildAround, faceOfGeneratedConvex):
	poly := empty 3d_face()

	curTetra = adjTetras[0]
	poly.add_point(curTetra)

	for face in curTetra:
		if edge in face:
			
		


		
		
		
		
		
		
		
		
		
		
======================================================================================================
======================================================================================================
======================================================================================================
======================================================================================================
